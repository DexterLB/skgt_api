// generated by jsonenums -type=Transport; DO NOT EDIT

package realtime

import (
	"encoding/json"
	"fmt"
)

var (
	_TransportNameToValue = map[string]Transport{
		"Bus":     Bus,
		"Tram":    Tram,
		"Trolley": Trolley,
	}

	_TransportValueToName = map[Transport]string{
		Bus:     "Bus",
		Tram:    "Tram",
		Trolley: "Trolley",
	}
)

func init() {
	var v Transport
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TransportNameToValue = map[string]Transport{
			interface{}(Bus).(fmt.Stringer).String():     Bus,
			interface{}(Tram).(fmt.Stringer).String():    Tram,
			interface{}(Trolley).(fmt.Stringer).String(): Trolley,
		}
	}
}

// MarshalJSON is generated so Transport satisfies json.Marshaler.
func (r Transport) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TransportValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Transport: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Transport satisfies json.Unmarshaler.
func (r *Transport) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Transport should be a string, got %s", data)
	}
	v, ok := _TransportNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Transport %q", s)
	}
	*r = v
	return nil
}
